name: Python


on:
  push:
    branches: [main]
    paths:
      - '**.{rs,pyi}'
      - tests/**
      - pyproject.toml
      - uv.lock
      - Cargo.{toml,lock}
      - .github/workflows/python.yml
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main]
    paths:
      - '**.{rs,pyi}'
      - tests/**
      - pyproject.toml
      - uv.lock
      - Cargo.{toml,lock}
      - .github/workflows/python.yml

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          - runner: ubuntu-latest
            target: armv7
          - runner: ubuntu-latest
            target: s390x
          - runner: ubuntu-latest
            target: ppc64le
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist/*

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist/*

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist/*

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/*

  test:
    runs-on: windows-latest
    steps:
      - name: Checkout this Repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6
        id: setup-uv
        with:
          enable-cache: true
      - name: Cache deps
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: python-test-${{ hashFiles('Cargo.lock', 'uv.lock') }}
      - name: Setup Rust
        run: rustup update --no-self-update
      - name: Install Workflow Dependencies
        run: uv sync
      - name: Run pytest
        run: uv run pytest -v --log-cli-level DEBUG --color yes

  release:
    runs-on: ubuntu-latest
    needs: [linux, windows, macos, sdist, test]
    permissions:
      id-token: write
    steps:
      - name: Checkout this Repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v6

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: twine Check
        run: uvx twine check dist/*

      # now uses trusted publishing
      - name: Publish package PyPI
        if: startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verify-metadata: false
          skip-existing: true
