name: Rust

permissions:
  contents: read

on:
  push:
    branches: [main]
    paths:
      - '**/*.rs'
      - Cargo.{toml,lock}
      - tests/demo_project/**
      - .github/workflows/rust.yml
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main]
    paths:
      - '**/*.rs'
      - Cargo.{toml,lock}
      - tests/demo_project/**
      - .github/workflows/rust.yml

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Rust
        run: rustup update --no-self-update
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-llvm-cov and cargo-nextest
        run: cargo binstall -y cargo-nextest cargo-llvm-cov
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache deps
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: cargo-lib-${{ hashFiles('src/**', 'Cargo.toml', 'Cargo.lock') }}
      - run: rustup component add llvm-tools-preview
        # this enables a tool (for default toolchain) needed to measure code coverage.
      - run: git config set user.name ${{ github.actor }}
      - name: Run tests
        run: >-
          cargo llvm-cov --no-report nextest
          --features bin
          --color always
          --profile ci
      - name: Generate coverage reports
        run: cargo llvm-cov report --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  build:
    runs-on: ${{ matrix.os }}
    name: build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: powerpc-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: powerpc64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: powerpc64le-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: s390x-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        run: |-
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Install cargo-binstall
        if: matrix.cross
        uses: cargo-bins/cargo-binstall@main
      - name: Install cross (cargo cross compiler)
        if: matrix.cross
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: cargo binstall -y cross

      - name: Build
        run: >-
          ${{ matrix.cross && 'cross' || 'cargo '}}
          build
          --bin rmskin-build
          --release
          --target ${{ matrix.target }}
          --features bin

      - name: Prepare artifacts
        run: >-
          mv target/${{ matrix.target }}/release/rmskin-build${{ runner.os == 'Windows' && '.exe' || '' }}
          ./rmskin-build-${{ matrix.target }}${{ runner.os == 'Windows' && '.exe' || '' }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rmskin-build-${{ matrix.target }}
          path: rmskin-build-${{ matrix.target }}*
          if-no-files-found: error

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable --no-self-update
      - name: Build API docs
        run: cargo doc --no-deps --lib
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-docs
          path: target/doc/rmskin_builder
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [build, test, docs]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup update stable --no-self-update
      - name: Download built assets
        uses: actions/download-artifact@v4
        with:
          pattern: rmskin-build-*
          path: dist
          merge-multiple: true

      - name: Setup nushell
        uses: hustcer/setup-nu@v3
        with:
          version: "*"
      - name: Upload release assets
        shell: nu {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          let files = ls dist | get "name"
          ^gh release upload ${{ github.ref_name }} ...$files
