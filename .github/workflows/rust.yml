name: Rust

on:
  push:
    branches: [main]
    paths:
      - '**/*.rs'
      - Cargo.toml
      - Cargo.lock
      - tests/demo_project/**
      - .github/workflows/rust.yml
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [main]
    paths:
      - '**/*.rs'
      - Cargo.toml
      - Cargo.lock
      - tests/demo_project/**
      - .github/workflows/rust.yml

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions: {}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          # need git history for some tests about determining version
          fetch-depth: 0
      - name: Cache deps
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4 # zizmor: ignore[cache-poisoning]
        with:
          path: ~/.cargo
          key: rust-test-${{ hashFiles('Cargo.lock') }}
      - name: Setup Rust
        run: rustup update --no-self-update
      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@837578dfb436769f1e6669b2e23ffea9d9d2da8f # v1.15.4
      - name: Install cargo-llvm-cov and cargo-nextest
        run: cargo binstall -y cargo-nextest cargo-llvm-cov nur
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: rustup component add llvm-tools-preview
        # this enables a tool (for default toolchain) needed to measure code coverage.
      - run: git config set user.name ${GITHUB_ACTOR}
      - name: Run tests
        run: nur test --profile ci
      - name: Generate coverage reports
        run: nur test lcov
      - uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true

  build:
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    name: build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: powerpc-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: powerpc64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: powerpc64le-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: s390x-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Setup Rust
        run: |-
          rustup update
          rustup target add ${{ matrix.target }}

      - name: Install cargo-binstall
        if: matrix.cross
        uses: cargo-bins/cargo-binstall@837578dfb436769f1e6669b2e23ffea9d9d2da8f # v1.15.4
      - name: Install cross (cargo cross compiler)
        if: matrix.cross
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: cargo binstall -y cross

      - name: Build
        run: >-
          ${{ matrix.cross && 'cross' || 'cargo '}}
          build
          --bin rmskin-build
          --release
          --target ${{ matrix.target }}
          --features bin

      - name: Prepare artifacts (unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |-
          tgt="rmskin-build"
          mv "target/${{ matrix.target }}/release/${tgt}" "${tgt}"
          arc_name="rmskin-build-${{ matrix.target }}.tar.gz"
          tar -a -c -v -z -f "${arc_name}" ${tgt} LICENSE
      - name: Prepare artifacts (windows)
        if: runner.os == 'Windows'
        shell: pwsh
        # `tar.exe` in powershell is different from `tar` in bash.
        # need to use `tar.exe` in powershell to create a valid zip file.
        run: |-
          $tgt = "rmskin-build.exe"
          mv "target/${{ matrix.target }}/release/${tgt}" "${tgt}"
          $arc_name = "rmskin-build-${{ matrix.target }}.zip"
          tar -a -c -v -f "${arc_name}" ${tgt} LICENSE

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: rmskin-build-${{ matrix.target }}
          path: rmskin-build-${{ matrix.target }}*
          if-no-files-found: error

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Cache deps
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4 # zizmor: ignore[cache-poisoning]
        with:
          path: ~/.cargo
          key: cargo-doc-${{ hashFiles('Cargo.lock') }}
      - name: Install Rust
        run: rustup update stable --no-self-update
      - name: Build API docs
        run: cargo doc --no-deps --lib
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: api-docs
          path: target/doc/rmskin_builder
          if-no-files-found: error

  release:
    runs-on: ubuntu-latest
    needs: [build, test, docs]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup update stable --no-self-update

      - name: Validate release assets
        if: ${{ !startsWith(github.ref, 'refs/tags') }}
        run: cargo package

      - name: Download built assets
        # if: startsWith(github.ref, 'refs/tags')
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: rmskin-build-*
          path: dist
          merge-multiple: true
      - name: List release assets
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |-
          files=$(ls dist)
          echo "${files}"
      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags')
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          files=$(ls dist)
          gh release upload ${GITHUB_REF_NAME} ${files}
