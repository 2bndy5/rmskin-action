# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
<!-- markdownlint-disable MD024 -->\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
{%- set UNRELEASED = "Unreleased" -%}
{%- set init_commit = "db6e3553b1917ad04ba52fa61c61f0216f4063e4" -%}
{%- set this_version = UNRELEASED -%}

{% if version -%}
    {%- set this_version = version | trim_start_matches(pat="v") -%}
    ## [{{ this_version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {%- if message %}

        > {{ message }}
    {%- endif %}
{% else -%}
    ## [{{ UNRELEASED }}]{% if previous and previous.timestamp %} - {{ previous.timestamp | date(format="%Y-%m-%d") }} to present{% endif %}
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }})
            {%- else %} in \
            [`{{ commit.id | truncate(length=7, end="") }}`]({{ self::remote_url() }}/commit/{{commit.id }})
            {%- endif -%}
    {% endfor %}
{% endfor -%}

{% set last_commit = "HEAD" -%}
{%- set first_commit = init_commit -%}
{% if version -%}
    {%- set last_commit = version -%}
    {%- if previous and previous.version -%}
        {%- set first_commit = previous.version -%}
    {%- endif -%}
{%- endif %}
[{{ this_version }}]: {{ self::remote_url() }}/compare/{{ first_commit }}...{{ last_commit }}

Full commit diff: [`{% if previous.version -%}
    {{ first_commit }}
{%- else -%}
    {{ init_commit | truncate(length=7, end="") }}
{%- endif %}...{{ last_commit }}`][{{ this_version }}]
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
    {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
    - @{{ contributor.username }} made their first contribution
        {%- if contributor.pr_number %} in \
            [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
        {%- endif %}
    {%- endfor %}
{% endif %}

"""
# template for the changelog footer
footer = """

<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# The file path for output. This can be overridden with `--output` CLI arg
# output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
require_conventional = false
# don not skip commits with breaking changes
protect_breaking_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    # remove issue numbers from commits
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { field = "github.pr_labels", pattern = "breaking", group = "<!-- 0 --> 💥 Breaking changes" },
    { field = "github.pr_labels", pattern = "breaking-change", group = "<!-- 0 --> 💥 Breaking changes" },
    { field = "github.pr_labels", pattern = "feature", group = "<!-- 1 --> 🚀 Added" },
    { field = "github.pr_labels", pattern = "enhancement", group = "<!-- 1 --> 🚀 Added" },
    { field = "github.pr_labels", pattern = "deprecated", group = "<!-- 2 --> 🚫 Deprecated" },
    { field = "github.pr_labels", pattern = "removed", group = "<!-- 3 --> 🗑️ Removed" },
    { field = "github.pr_labels", pattern = "bug", group = "<!-- 4 --> 🛠️ Fixed" },
    { field = "github.pr_labels", pattern = "security", group = "<!-- 5 --> 🔐 Security" },
    { field = "github.pr_labels", pattern = "dependencies", group = "<!-- 6 --> 📦 Dependency updates" },
    { field = "github.pr_labels", pattern = "test", group = "<!-- 7 -->🚦 Tests"},
    { field = "github.pr_labels", pattern = "tests", group = "<!-- 7 -->🚦 Tests"},
    { field = "github.pr_labels", pattern = "documentation", group = "<!-- 8 --> 📝 Documentation" },
    { field = "github.pr_labels", pattern = "refactor", group = "<!-- 9 --> 🗨️ Changed" },
    { field = "github.pr_labels", pattern = "skip-changelog", skip = true },
    { field = "github.pr_labels", pattern = "no-changelog", skip = true },
    { field = "github.pr_labels", pattern = "invalid", skip = true },
    # The order of parsers matters. Put rules for PR labels first to prioritize PR labels.
    # Next we categorize by conventional commit group (`group: msg`).
    { field = "group", pattern = "add", group = "<!-- 1 --> 🚀 Added" },
    { field = "group", pattern = "feat", group = "<!-- 1 --> 🚀 Added" },
    { field = "group", pattern = "fix", group = "<!-- 4 --> 🛠️ Fixed" },
    { field = "group", pattern = "perf", group = "<!-- 4 --> 🛠️ Fixed" },
    { field = "group", pattern = "build", group = "<!-- 6 --> 📦 Dependency updates" },
    { field = "group", pattern = "test", group = "<!-- 7 -->🚦 Tests" },
    { field = "group", pattern = "docs", group = "<!-- 8 --> 📝 Documentation" },
    { field = "group", pattern = "chore", group = "<!-- 9 --> 🗨️ Changed" },
    { field = "group", pattern = "style", group = "<!-- 9 --> 🗨️ Changed" },
    # this parser seems to break parsing of unconventional commit messages
    # { field = "breaking", pattern = true, group = "<!-- 10 --> 💥 Breaking Changes" },
    { field = "group", pattern = "remove", group = "<!-- 3 --> 🗑️ Removed" },
    { field = "group", pattern = "deprecate", group = "<!-- 2 --> 🚫 Deprecated" },
    { field = "group", pattern = "delete", group = "<!-- 3 --> 🗑️ Removed" },
    { field = "group", pattern = "security", group = "<!-- 5 --> 🔐 Security" },
    { field = "group", pattern = "refactor", group = "<!-- 9 --> 🗨️ Changed" },
    # Next we have filters for unconventional commit messages
    { message = "^[a|A]dd", group = "<!-- 1 --> 🚀 Added" },
    { message = "^.*: [s|S]upport", group = "<!-- 1 --> 🚀 Added" },
    { message = "^.*: [a|A]dd", group = "<!-- 1 --> 🚀 Added" },
    { message = "^.*: [d|D]eprecated", group = "<!-- 2 --> 🚫 Deprecated" },
    { message = "^.*: [r|R]emove", group = "<!-- 3 --> 🗑️ Removed" },
    { message = "^.*: [d|D]elete", group = "<!-- 3 --> 🗑️ Removed" },
    { message = "^[f|F]ix", group = "<!-- 4 --> 🛠️ Fixed" },
    { message = "^.*: [f|F]ix", group = "<!-- 4 --> 🛠️ Fixed" },
    { message = "^.*: [s|S]ecure", group = "<!-- 5 --> 🔐 Security" },
    { message = "^.*: [s|S]ecurity", group = "<!-- 5 --> 🔐 Security" },
    { message = "^[t|T]est", group = "<!-- 7 -->🚦 Tests"},
    { message = "[d|D]oc\\b", group = "<!-- 8 --> 📝 Documentation" },
    { message = "[d|D]ocs", group = "<!-- 8 --> 📝 Documentation" },
    { message = "[d|D]ocumentation", group = "<!-- 8 --> 📝 Documentation" },
    # anything left after not being caught by filters above gets put in the "Changed" section
    { message = "[r|R]efactor", group = "<!-- 9 --> 🗨️ Changed" },
    { field = "github.pr_labels", pattern = ".*", group = "<!-- 9 --> 🗨️ Changed" },
    { message = "^.*", group = "<!-- 9 --> 🗨️ Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# Ignore rolling tags for major and minor versions.
# Only use tags with full version.
tag_pattern = "v[0-9]+.[0-9]+.[0-9]+"

# [remote.github]
# owner = "2bndy5"
# repo = "rmskin-action"
